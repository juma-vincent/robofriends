{"version":3,"sources":["components/Card.js","components/CardList.js","components/Scroll.js","components/SearchBox.js","components/ErrorBoundary.js","containers/App.js","actions.js","constants.js","reducers.js","serviceWorker.js","index.js"],"names":["Card","props","className","src","name","alt","email","Cardlist","robots","map","robot","key","id","Scroll","style","overflowY","border","height","children","SearchBox","onSearch","onChange","type","placeholder","ErrorBoundary","state","hasErrors","error","info","this","setState","Component","App","handleRequestRobots","searchField","handleSearch","isPending","filteredRobots","filter","toLowerCase","includes","CardList","connect","searchRobots","requestRobots","errors","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","initialStateSearch","initialStateRobots","Boolean","window","location","hostname","match","logger","createLogger","rootReducer","combineReducers","action","console","log","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.347815f1.chunk.js","sourcesContent":["import React from \"react\";\r\nconst Card = (props) => {\r\n  return (\r\n    <div className=\"  bg-light-green tc br2 dib pa3 ma2 grow bw3 shadow-5\">\r\n      \r\n      <img src={`https://robohash.org/${props.name}?200x200`} alt=\"Robot\" />\r\n      <div className=\"\">\r\n        <h3>{props.name}</h3>\r\n        <p>\r\n          <small>{props.email}</small>\r\n        </p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n","import React, { Component } from \"react\";\r\nimport Card from \"./Card\";\r\n\r\nconst Cardlist = ({ robots }) => {\r\n  // if (true) {\r\n  //   throw new Error(\"Nooooooo\");\r\n  // }\r\n  return (\r\n    <div className=\"tc\">\r\n      {robots.map((robot) => (\r\n        <Card key={robot.id} name={robot.name} email={robot.email} />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Cardlist;\r\n","import React from \"react\";\r\n\r\nconst Scroll = (props) => {\r\n  return (\r\n    <div\r\n      style={{\r\n        overflowY: \"scroll\",\r\n        border: \"1px solid brown\",\r\n        height: \"700px\",\r\n      }}\r\n    >\r\n      {props.children}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Scroll;\r\n","import React from \"react\";\r\n\r\nconst SearchBox = ({ onSearch }) => {\r\n  return (\r\n    <div className=\" tc\">\r\n      <input\r\n        className=\"searchbox  bg-white br2 pa1 ba b--silver  \"\r\n        onChange={onSearch}\r\n        type=\"search\"\r\n        placeholder=\"Search a robot\"\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SearchBox;\r\n","import React, { Component } from \"react\";\r\n\r\nclass ErrorBoundary extends Component {\r\n  state = { hasErrors: false };\r\n\r\n  componentDidCatch(error, info) {\r\n    this.setState({ hasErrors: true });\r\n  }\r\n\r\n  render() {\r\n    return this.state.hasErrors ? (\r\n      <h1>Ooops, there is a problem</h1>\r\n    ) : (\r\n      this.props.children\r\n    );\r\n  }\r\n}\r\n\r\nexport default ErrorBoundary;\r\n","import React, { Component } from \"react\";\r\nimport CardList from \"../components/CardList\";\r\nimport Scroll from \"../components/Scroll\";\r\nimport SearchBox from \"./../components/SearchBox\";\r\nimport ErrorBoundary from \"../components/ErrorBoundary\";\r\nimport { setSearchField, requestRobots } from \"../actions\";\r\nimport { connect } from \"react-redux\";\r\n// import { searchRobots } from \"./../reducers\";\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    searchField: state.searchRobots.searchField,\r\n    robots: state.requestRobots.robots,\r\n    isPending: state.requestRobots.isPending,\r\n    errors: state.requestRobots.errors,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    handleSearch: (event) => dispatch(setSearchField(event.target.value)),\r\n    handleRequestRobots: () => dispatch(requestRobots()),\r\n  };\r\n};\r\n\r\nclass App extends Component {\r\n  componentDidMount() {\r\n    this.props.handleRequestRobots();\r\n  }\r\n\r\n  render() {\r\n    const { searchField, handleSearch, robots, isPending } = this.props;\r\n    const filteredRobots = robots.filter((robot) =>\r\n      robot.name.toLowerCase().includes(searchField.toLowerCase())\r\n    );\r\n    return isPending ? (\r\n      <h1>Loading</h1>\r\n    ) : (\r\n      <div>\r\n        <h1 className=\"tc\"> Home of Robos</h1>\r\n        <SearchBox onSearch={handleSearch} />\r\n        <Scroll>\r\n          <ErrorBoundary>\r\n            <CardList robots={filteredRobots} />\r\n          </ErrorBoundary>\r\n        </Scroll>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n","import {\r\n  CHANGE_SEARCH_FIELD,\r\n  REQUEST_ROBOTS_FAILED,\r\n  REQUEST_ROBOTS_PENDING,\r\n  REQUEST_ROBOTS_SUCCESS,\r\n} from \"./constants\";\r\n\r\nexport const setSearchField = (text) => {\r\n  return { type: CHANGE_SEARCH_FIELD, payload: text };\r\n};\r\n\r\nexport const requestRobots = () => (dispatch) => {\r\n  dispatch({ type: REQUEST_ROBOTS_PENDING });\r\n  fetch(\"https://jsonplaceholder.typicode.com/users\")\r\n    .then((response) => response.json())\r\n    .then((data) => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\r\n    .catch((error) =>\r\n      dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error })\r\n    );\r\n};\r\n","export const CHANGE_SEARCH_FIELD = \"CHANGE_SEARCH_FIELD\";\r\n\r\nexport const REQUEST_ROBOTS_FAILED = \"REQUEST_ROBOTS_FAILED\";\r\nexport const REQUEST_ROBOTS_PENDING = \"REQUEST_ROBOTS_PENDING\";\r\nexport const REQUEST_ROBOTS_SUCCESS = \"REQUEST_ROBOTS_SUCCESS\";\r\n","import {\r\n  CHANGE_SEARCH_FIELD,\r\n  REQUEST_ROBOTS_FAILED,\r\n  REQUEST_ROBOTS_PENDING,\r\n  REQUEST_ROBOTS_SUCCESS,\r\n} from \"./constants\";\r\n\r\nconst initialStateSearch = {\r\n  searchField: \"\",\r\n};\r\n\r\nexport const searchRobots = (state = initialStateSearch, action = {}) => {\r\n  console.log(action.type);\r\n  switch (action.type) {\r\n    case CHANGE_SEARCH_FIELD:\r\n      return Object.assign({}, state, { searchField: action.payload });\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst initialStateRobots = {\r\n  robots: [],\r\n  isPending: false,\r\n  errors: \"\",\r\n};\r\n\r\nexport const requestRobots = (state = initialStateRobots, action = {}) => {\r\n  switch (action.type) {\r\n    case REQUEST_ROBOTS_PENDING:\r\n      return Object.assign({}, state, { isPending: true });\r\n    case REQUEST_ROBOTS_SUCCESS:\r\n      return Object.assign({}, state, {\r\n        robots: action.payload,\r\n        isPending: false,\r\n      });\r\n    case REQUEST_ROBOTS_FAILED:\r\n      return Object.assign({}, state, {\r\n        errors: action.payload,\r\n        isPending: false,\r\n      });\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./containers/App\";\nimport \"tachyons\";\nimport { Provider } from \"react-redux\";\nimport { createStore, applyMiddleware, combineReducers } from \"redux\";\nimport { searchRobots, requestRobots } from \"./reducers\";\nimport { createLogger } from \"redux-logger\";\nimport thunkMiddleware from \"redux-thunk\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nconst logger = createLogger();\nconst rootReducer = combineReducers({ searchRobots, requestRobots });\nconst store = createStore(\n  rootReducer,\n  applyMiddleware(thunkMiddleware, logger)\n);\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}